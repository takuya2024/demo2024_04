import pygame
from pygame import mixer
import random
import math

pygame.init()

screen = pygame.display.set_mode((800, 600))
# screen.fill((150, 150, 150))
pygame.display.set_caption('11 Invaders')

pygame.mixer.music.load('Funky Carioca - Quincas Moreira.mp3')
pygame.mixer.music.play(-1)  # ループ再生
pygame.mixer.music.set_volume(0.3)

#背景
background = pygame.image.load('bg_uchu_space.jpg')
background = pygame.transform.scale(background, (800, 600))
screen.blit(background, (0,0))

# 爆発画像の読み込み
explosionImg = pygame.image.load('explosion.png')
explosionImg = pygame.transform.scale(explosionImg, (80, 80))

# 爆発音の読み込み
explosion_sound = pygame.mixer.Sound('Big_Explosion_Cut_Off.mp3')

# Player
playerImg = pygame.image.load('player.png')
playerX, playerY = 370, 480
playerX_change = 0

# Enemy
enemyImg = pygame.image.load('enemy.png')
enemyImg = pygame.transform.scale(enemyImg, (70, 70))
enemyX = random.randint(0, 736)
enemyY = random.randint(50, 150)
enemyX_change, enemyY_change = 1.5, 40

# Bullet
bulletImg = pygame.image.load('bullet.png')
bulletX, bulletY = 0, 480
bulletX_change, bulletY_change = 0, 3
bullet_state = 'ready'

# 敵の爆弾 new
enemy_bulletImg = pygame.image.load('bakudan.png')
enemy_bulletImg = pygame.transform.scale(enemy_bulletImg, (69, 69))
enemy_bulletX, enemy_bulletY = 0, 0
enemy_bulletX_change, enemy_bulletY_change = 0, 0.7
enemy_bullet_state = 'ready'

# Score
score_value = 0
score_rest = 11

# 冒頭画面
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
# フォントファイルのパスとサイズを指定してフォントオブジェクトを作成
font_path = "meiryob.ttc"
font_size = 24
font = pygame.font.Font(font_path, font_size)

def draw_score():
    score = font.render(f"インベーダーズ残 : {str(score_rest)}", True, (255, 255, 255))  # テキストを描画したSurfaceの作成
    screen.blit(score, (20, 30))

def player(x, y):
    screen.blit(playerImg, (x, y))

def enemy(x, y):
    screen.blit(enemyImg, (x, y))

def fire_bullet(x, y):
    global bullet_state
    bullet_state = 'fire'
    screen.blit(bulletImg, (x - 24, y - 50))

# 敵が弾を発射する関数
def fire_enemy_bullet(x, y):
    global enemy_bullet_state
    enemy_bullet_state = 'fire'
    screen.blit(enemy_bulletImg, (x, y))

def isCollision(enemyX, enemyY, bulletX, bulletY):
    distance = math.sqrt(math.pow(enemyX - bulletX, 2) + math.pow(enemyY - bulletY, 2))
    if distance < 27:
        return True
    else:
        return False

# プレイヤーが敵の弾と衝突したかどうかを確認する関数
def isPlayerHit(enemy_bulletX, enemy_bulletY, playerX, playerY):
    distance_second = math.sqrt(math.pow(enemy_bulletX - playerX, 2) + math.pow(enemy_bulletY - playerY, 2))
    if distance_second < 50:
        return True
    else:
        return False

def explosion(x, y):
    screen.blit(explosionImg, (x, y))
    fire_enemy_bullet(enemy_bulletX, enemy_bulletY)
    draw_score()
    player(playerX, playerY)
    pygame.display.flip()
    explosion_sound.play()
    pygame.time.delay(200)

def player_explosion(x, y):
    screen.blit(explosionImg, (x, y))
    draw_score()
    pygame.display.flip()
    explosion_sound.play()
    pygame.time.delay(400)

def game_over_screen():
    game_over_font = pygame.font.Font(None, 100)
    game_over_text = game_over_font.render("Game Over", True, WHITE)
    text_rect = game_over_text.get_rect(center=(400, 250))  # テキストを画面の中央に配置
    screen.blit(game_over_text, text_rect)

    # もう一度挑戦するか終了するかを選択するメッセージを表示
    restart_text = font.render("もう一度挑戦する: 上キー", True, WHITE)
    quit_text = font.render("ゲームを終了する: 下キー", True, WHITE)
    restart_rect = restart_text.get_rect(center=(400, 350))
    quit_rect = quit_text.get_rect(center=(400, 400))
    screen.blit(restart_text, restart_rect)
    screen.blit(quit_text, quit_rect)
    pygame.display.flip()

def restart_game():
    global playerX, playerY, enemyX, enemyY, score_value, enemy_bullet_state,  playerX_change, bullet_state, score_rest
    enemy_bullet_state = 'ready'
    playerX, playerY = 370, 480
    enemyX = random.randint(0, 736)
    enemyY = random.randint(50, 150)
    score_value = 0
    score_rest = 11
    playerX_change = 0
    bullet_state = 'ready'

def new_game():
    global playerX, playerY, enemyX, enemyY, score_value, enemy_bullet_state, playerX_change, bullet_state, score_rest
    enemy_bullet_state = 'ready'
    playerX, playerY = 370, 480
    enemyX = random.randint(0, 736)
    enemyY = random.randint(50, 150)
    score_value = 0
    score_rest = 11
    playerX_change = 0
    bullet_state = 'ready'
    pygame.mixer.music.load('background_music.mp3')
    pygame.mixer.music.play(-1)  # ループ再生
    pygame.mixer.music.set_volume(0.3)

def start_screen():
    start_text1 = font.render("スペースキー : ゲームスタート / 攻撃", True, WHITE)
    start_text1_2 = font.render("左キー / 右キー : 移動", True, WHITE)
    start_text2_font = pygame.font.Font(font_path, 50)  # 新しいフォントオブジェクトを作成
    start_text2 = start_text2_font.render("11 インベーダーズ", True, WHITE)  # start_text2_font を使用してテキストをレンダリング
    text_rect1 = start_text1.get_rect(center=(400, 240))
    text_rect1_2 = start_text1.get_rect(center=(485, 290))
    text_rect2 = start_text2.get_rect(center=(400, 350))
    screen.blit(start_text1, text_rect1)
    screen.blit(start_text1_2, text_rect1_2)
    screen.blit(start_text2, text_rect2)
    pygame.display.flip()

    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            elif event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
                waiting = False

def congratulations():
    screen.blit(explosionImg, (enemyX, enemyY))
    explosion_sound.play()
    fire_enemy_bullet(enemy_bulletX, enemy_bulletY)
    draw_score()
    player(playerX, playerY)
    pygame.display.flip()

    pygame.mixer.music.load('cong.mp3')
    pygame.mixer.music.play(-1)  # ループ再生
    pygame.mixer.music.set_volume(0.3)
    congratulations_font = pygame.font.Font(font_path, 50)
    congratulations_text = congratulations_font.render("クリアおめでとう！", True, WHITE)
    text_rect = congratulations_text.get_rect(center=(400, 250))  # テキストを画面の中央に配置
    screen.blit(congratulations_text, text_rect)

    # もう一度挑戦するか終了するかを選択するメッセージを表示
    restart_text = font.render("新しく挑戦する: 上キー", True, WHITE)
    quit_text = font.render("ゲームを終了する: 下キー", True, WHITE)
    restart_rect = restart_text.get_rect(center=(400, 350))
    quit_rect = quit_text.get_rect(center=(400, 400))
    screen.blit(restart_text, restart_rect)
    screen.blit(quit_text, quit_rect)
    pygame.display.flip()

start_screen()
# 冒頭画面

# 音楽開始
pygame.mixer.music.load('background_music.mp3')
pygame.mixer.music.play(-1)  # ループ再生
pygame.mixer.music.set_volume(0.3)

running = True
while running:
    screen.fill((0, 0, 0))
    # 背景
    screen.blit(background, (0, 0))

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                playerX_change = -1.5
            if event.key == pygame.K_RIGHT:
                playerX_change = 1.5
            if event.key == pygame.K_SPACE:
                if bullet_state == 'ready':
                    bulletX = playerX
                    fire_bullet(bulletX, bulletY)

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                playerX_change = 0
    # Player
    playerX += playerX_change
    if playerX <= 0:
        playerX = 0
    elif playerX >= 736:
        playerX = 736

    # Enemy
    # プレイヤーが敵の弾と衝突したかどうかを確認する
    player_hit = isPlayerHit(enemy_bulletX, enemy_bulletY, playerX, playerY)
    if player_hit or enemyY > 418:
        enemy(enemyX, enemyY)
        game_over_screen()
        player_explosion(playerX, playerY)
        restart_game()

        waiting = True
        while waiting:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    quit()
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_UP:
                        waiting = False
                    elif event.key == pygame.K_DOWN:
                        pygame.quit()
                        quit()

    enemy_hit = isCollision(enemyX, enemyY, bulletX, bulletY)
    if enemy_hit and score_rest == 0:
        score_rest -= 1
        congratulations()

        waiting = True
        while waiting:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    quit()
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_UP:
                        waiting = False
                        new_game()
                    elif event.key == pygame.K_DOWN:
                        pygame.quit()
                        quit()

    enemyX += enemyX_change
    if enemyX <= 0:  # 左端に来たら
        enemyX_change = 1.5
        enemyY += enemyY_change
    elif enemyX >= 750:  # 右端に来たら
        enemyX_change = -1.5
        enemyY += enemyY_change

    collision = isCollision(enemyX, enemyY, bulletX, bulletY)

    if collision:
        bulletY = 480
        bullet_state = 'ready'
        score_rest -= 1
        score_value += 1
        explosion(enemyX, enemyY)
        enemyX = random.randint(0, 736)
        enemyY = random.randint(50, 150)

        # Bullet Movement
    if bulletY <= 0:
        bulletY = 480
        bullet_state = 'ready'

    if bullet_state == 'fire':
        fire_bullet(bulletX, bulletY)
        bulletY -= bulletY_change

    # メインループ内で敵が弾を発射する処理を追加 する
    if enemy_bullet_state == 'ready' :
        enemy_bulletX = enemyX - 8  # 敵の中心に弾を配置する
        enemy_bulletY = enemyY + 35  # 敵の下部に弾を配置する
        fire_enemy_bullet(enemy_bulletX, enemy_bulletY)  # 弾を発射する関数を呼び出す
        enemy_bullet_state = 'fire'

    # 敵の弾の移動を処理する
    if enemy_bullet_state == 'fire':
        fire_enemy_bullet(enemy_bulletX, enemy_bulletY)
        enemy_bulletY += enemy_bulletY_change
        # 画面下端に到達したら新しい弾を発射する
        if enemy_bulletY >= 600:
            enemy_bullet_state = 'ready'  # 弾の状態を準備完了に設定し、新しい弾を発射できるようにする

    enemyX += enemyX_change * score_value * 0.2
    draw_score()
    player(playerX, playerY)
    enemy(enemyX, enemyY)

    pygame.display.update()
